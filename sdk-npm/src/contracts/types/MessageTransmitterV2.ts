/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MessageTransmitterV2Interface extends utils.Interface {
  functions: {
    "receiveMessage(bytes,bytes)": FunctionFragment;
    "replaceMessage(bytes,bytes)": FunctionFragment;
    "sendMessage(uint32,bytes32,bytes)": FunctionFragment;
    "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)": FunctionFragment;
    "usedNonces(bytes32)": FunctionFragment;
    "localDomain()": FunctionFragment;
    "version()": FunctionFragment;
    "attestationManager(bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "receiveMessage"
      | "replaceMessage"
      | "sendMessage"
      | "sendMessageWithCaller"
      | "usedNonces"
      | "localDomain"
      | "version"
      | "attestationManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceMessage",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageWithCaller",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedNonces",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "attestationManager",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageWithCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedNonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestationManager",
    data: BytesLike
  ): Result;

  events: {
    "MessageSent(bytes)": EventFragment;
    "MessageReceived(address,uint32,uint64,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageReceived"): EventFragment;
}

export interface MessageSentEventObject {
  message: string;
}
export type MessageSentEvent = TypedEvent<[string], MessageSentEventObject>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface MessageReceivedEventObject {
  caller: string;
  sourceDomain: number;
  nonce: BigNumber;
  sender: string;
  messageBody: string;
}
export type MessageReceivedEvent = TypedEvent<
  [string, number, BigNumber, string, string],
  MessageReceivedEventObject
>;

export type MessageReceivedEventFilter = TypedEventFilter<MessageReceivedEvent>;

export interface MessageTransmitterV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MessageTransmitterV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    receiveMessage(
      _message: BytesLike,
      _attestation: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    replaceMessage(
      _message: BytesLike,
      _attestation: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sendMessage(
      _destinationDomain: BigNumberish,
      _recipient: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sendMessageWithCaller(
      _destinationDomain: BigNumberish,
      _recipient: BytesLike,
      _destinationCaller: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    usedNonces(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[number]>;

    attestationManager(
      _message: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  receiveMessage(
    _message: BytesLike,
    _attestation: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  replaceMessage(
    _message: BytesLike,
    _attestation: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sendMessage(
    _destinationDomain: BigNumberish,
    _recipient: BytesLike,
    _messageBody: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sendMessageWithCaller(
    _destinationDomain: BigNumberish,
    _recipient: BytesLike,
    _destinationCaller: BytesLike,
    _messageBody: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  usedNonces(
    _messageHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<number>;

  attestationManager(
    _message: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    receiveMessage(
      _message: BytesLike,
      _attestation: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    replaceMessage(
      _message: BytesLike,
      _attestation: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sendMessage(
      _destinationDomain: BigNumberish,
      _recipient: BytesLike,
      _messageBody: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessageWithCaller(
      _destinationDomain: BigNumberish,
      _recipient: BytesLike,
      _destinationCaller: BytesLike,
      _messageBody: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usedNonces(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<number>;

    attestationManager(
      _message: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "MessageSent(bytes)"(message?: null): MessageSentEventFilter;
    MessageSent(message?: null): MessageSentEventFilter;

    "MessageReceived(address,uint32,uint64,bytes32,bytes)"(
      caller?: string | null,
      sourceDomain?: null,
      nonce?: BigNumberish | null,
      sender?: null,
      messageBody?: null
    ): MessageReceivedEventFilter;
    MessageReceived(
      caller?: string | null,
      sourceDomain?: null,
      nonce?: BigNumberish | null,
      sender?: null,
      messageBody?: null
    ): MessageReceivedEventFilter;
  };

  estimateGas: {
    receiveMessage(
      _message: BytesLike,
      _attestation: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    replaceMessage(
      _message: BytesLike,
      _attestation: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sendMessage(
      _destinationDomain: BigNumberish,
      _recipient: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sendMessageWithCaller(
      _destinationDomain: BigNumberish,
      _recipient: BytesLike,
      _destinationCaller: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    usedNonces(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    attestationManager(
      _message: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    receiveMessage(
      _message: BytesLike,
      _attestation: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    replaceMessage(
      _message: BytesLike,
      _attestation: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _destinationDomain: BigNumberish,
      _recipient: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sendMessageWithCaller(
      _destinationDomain: BigNumberish,
      _recipient: BytesLike,
      _destinationCaller: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usedNonces(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attestationManager(
      _message: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
