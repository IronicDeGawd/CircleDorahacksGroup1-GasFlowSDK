/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenMessengerV2Interface extends utils.Interface {
  functions: {
    "depositForBurn(uint256,uint32,bytes32,address)": FunctionFragment;
    "depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)": FunctionFragment;
    "depositForBurnWithHook(uint256,uint32,bytes32,address,bytes)": FunctionFragment;
    "depositForBurnWithHookAndCaller(uint256,uint32,bytes32,address,bytes32,bytes)": FunctionFragment;
    "replaceDepositForBurn(bytes,bytes,bytes32,bytes32)": FunctionFragment;
    "burnLimitsPerMessage(address)": FunctionFragment;
    "localMessageTransmitter()": FunctionFragment;
    "localMinter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositForBurn"
      | "depositForBurnWithCaller"
      | "depositForBurnWithHook"
      | "depositForBurnWithHookAndCaller"
      | "replaceDepositForBurn"
      | "burnLimitsPerMessage"
      | "localMessageTransmitter"
      | "localMinter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositForBurn",
    values: [BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForBurnWithCaller",
    values: [BigNumberish, BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForBurnWithHook",
    values: [BigNumberish, BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForBurnWithHookAndCaller",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceDepositForBurn",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLimitsPerMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "localMessageTransmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localMinter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "depositForBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForBurnWithCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForBurnWithHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForBurnWithHookAndCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceDepositForBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnLimitsPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localMessageTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localMinter",
    data: BytesLike
  ): Result;

  events: {
    "DepositForBurn(uint64,address,uint256,address,bytes32,uint32,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositForBurn"): EventFragment;
}

export interface DepositForBurnEventObject {
  nonce: BigNumber;
  burnToken: string;
  amount: BigNumber;
  depositor: string;
  mintRecipient: string;
  destinationDomain: number;
  destinationTokenMessenger: string;
  destinationCaller: string;
}
export type DepositForBurnEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, number, string, string],
  DepositForBurnEventObject
>;

export type DepositForBurnEventFilter = TypedEventFilter<DepositForBurnEvent>;

export interface TokenMessengerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenMessengerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositForBurn(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositForBurnWithCaller(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _destinationCaller: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositForBurnWithHook(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositForBurnWithHookAndCaller(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _destinationCaller: BytesLike,
      _hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    replaceDepositForBurn(
      _originalMessage: BytesLike,
      _originalAttestation: BytesLike,
      _newDestinationCaller: BytesLike,
      _newMintRecipient: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    burnLimitsPerMessage(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<[string]>;

    localMinter(overrides?: CallOverrides): Promise<[string]>;
  };

  depositForBurn(
    _amount: BigNumberish,
    _destinationDomain: BigNumberish,
    _mintRecipient: BytesLike,
    _burnToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositForBurnWithCaller(
    _amount: BigNumberish,
    _destinationDomain: BigNumberish,
    _mintRecipient: BytesLike,
    _burnToken: string,
    _destinationCaller: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositForBurnWithHook(
    _amount: BigNumberish,
    _destinationDomain: BigNumberish,
    _mintRecipient: BytesLike,
    _burnToken: string,
    _hookData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositForBurnWithHookAndCaller(
    _amount: BigNumberish,
    _destinationDomain: BigNumberish,
    _mintRecipient: BytesLike,
    _burnToken: string,
    _destinationCaller: BytesLike,
    _hookData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  replaceDepositForBurn(
    _originalMessage: BytesLike,
    _originalAttestation: BytesLike,
    _newDestinationCaller: BytesLike,
    _newMintRecipient: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  burnLimitsPerMessage(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  localMessageTransmitter(overrides?: CallOverrides): Promise<string>;

  localMinter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    depositForBurn(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositForBurnWithCaller(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _destinationCaller: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositForBurnWithHook(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositForBurnWithHookAndCaller(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _destinationCaller: BytesLike,
      _hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    replaceDepositForBurn(
      _originalMessage: BytesLike,
      _originalAttestation: BytesLike,
      _newDestinationCaller: BytesLike,
      _newMintRecipient: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnLimitsPerMessage(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<string>;

    localMinter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DepositForBurn(uint64,address,uint256,address,bytes32,uint32,bytes32,bytes32)"(
      nonce?: BigNumberish | null,
      burnToken?: string | null,
      amount?: null,
      depositor?: string | null,
      mintRecipient?: null,
      destinationDomain?: null,
      destinationTokenMessenger?: null,
      destinationCaller?: null
    ): DepositForBurnEventFilter;
    DepositForBurn(
      nonce?: BigNumberish | null,
      burnToken?: string | null,
      amount?: null,
      depositor?: string | null,
      mintRecipient?: null,
      destinationDomain?: null,
      destinationTokenMessenger?: null,
      destinationCaller?: null
    ): DepositForBurnEventFilter;
  };

  estimateGas: {
    depositForBurn(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositForBurnWithCaller(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _destinationCaller: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositForBurnWithHook(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositForBurnWithHookAndCaller(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _destinationCaller: BytesLike,
      _hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    replaceDepositForBurn(
      _originalMessage: BytesLike,
      _originalAttestation: BytesLike,
      _newDestinationCaller: BytesLike,
      _newMintRecipient: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    burnLimitsPerMessage(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<BigNumber>;

    localMinter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositForBurn(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositForBurnWithCaller(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _destinationCaller: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositForBurnWithHook(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositForBurnWithHookAndCaller(
      _amount: BigNumberish,
      _destinationDomain: BigNumberish,
      _mintRecipient: BytesLike,
      _burnToken: string,
      _destinationCaller: BytesLike,
      _hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    replaceDepositForBurn(
      _originalMessage: BytesLike,
      _originalAttestation: BytesLike,
      _newDestinationCaller: BytesLike,
      _newMintRecipient: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    burnLimitsPerMessage(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localMessageTransmitter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
